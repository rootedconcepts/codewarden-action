name: Code Warden Pull Request Verification 

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches:
      - main

jobs:
  version-verification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Get Releases
        id: get-releases
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
          
            const releases = response.data.filter(release => !release.draft && !release.prerelease);
            const latestReleaseName = releases[0]?.name || "0.0.0";
            return latestReleaseName
      
      - name: Get Latest Release Version
        id: get-latest-release
        run: |
            latestTag=${{ steps.get-releases.outputs.result }}
            if [[ $latestTag =~ v([0-9]+)\.([0-9]+)\.([0-9]+)\. ]]; then
                major="${BASH_REMATCH[1]}"
                minor="${BASH_REMATCH[2]}"
                patch="${BASH_REMATCH[3]}"
                latestReleasedVersion="${major}.${minor}.${patch}"
            else
                latestReleasedVersion="0.0.0"
            fi
           
            echo "latestReleasedVersion=${latestReleasedVersion}"
            echo "latestReleasedVersion=$latestReleasedVersion" >> $GITHUB_OUTPUT
    

      - name: Read version from package.json
        id: read-package-version
        run: |
              VERSION=$(node -p "require('./package.json').version")
              echo "packageVersion=$VERSION"
              echo "packageVersion=$VERSION" >> $GITHUB_OUTPUT

      - name: Compare Package version to Release Version
        run: |
          packageVersion="${{ steps.read-package-version.outputs.packageVersion }}"
          releaseVersion="${{ steps.get-latest-release.outputs.latestReleasedVersion }}"
          if [ "$releaseVersion" == "$packageVersion" ]; then
            echo "Release version $releaseVersion already exists. Please update the version in your package.json as it is currently $packageVersion."
            exit 1
          fi

  pr-verification:
    needs: version-verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: npm install
      
      - name: Run Jest tests
        run: |
          npm test -- --coverage
          
      - name: Jest Coverage Comment
        uses: MishaKav/jest-coverage-comment@v1.0.23
      
